// <auto-generated />
using System;
using IBuyStuff.QueryModel.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IBuyStuff.QueryModel.Persistence.Migrations
{
    [DbContext(typeof(QueryModelDatabase))]
    [Migration("20230830103941_MyFirstMigration")]
    partial class MyFirstMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("IBuyStuff.Domain.Customers.Customer", b =>
                {
                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FirstName");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LastName");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("IBuyStuff.Domain.Customers.FidelityCard", b =>
                {
                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Number");

                    b.Property<string>("OwnerCustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.HasKey("Number");

                    b.HasIndex("OwnerCustomerId");

                    b.ToTable("FidelityCards", (string)null);
                });

            modelBuilder.Entity("IBuyStuff.Domain.Orders.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<string>("BuyerCustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("BuyerCustomerId");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("IBuyStuff.Domain.Orders.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("Quantity");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems", (string)null);
                });

            modelBuilder.Entity("IBuyStuff.Domain.Products.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Featured")
                        .HasColumnType("bit");

                    b.Property<int>("StockLevel")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("IBuyStuff.Domain.Customers.Customer", b =>
                {
                    b.OwnsOne("IBuyStuff.Domain.Customers.Address", "Address", b1 =>
                        {
                            b1.Property<string>("CustomerId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("nvarchar(15)")
                                .HasColumnName("Address_City");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Address_Number");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)")
                                .HasColumnName("Address_Street");

                            b1.Property<string>("Zip")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("nvarchar(15)")
                                .HasColumnName("Address_Zip");

                            b1.HasKey("CustomerId");

                            b1.ToTable("Customers");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");
                        });

                    b.OwnsOne("IBuyStuff.Domain.Shared.CreditCard", "Payment", b1 =>
                        {
                            b1.Property<string>("CustomerId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Number")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Payment_Number");

                            b1.Property<string>("Owner")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Payment_Owner");

                            b1.Property<int>("Type")
                                .HasColumnType("int")
                                .HasColumnName("Payment_Type");

                            b1.HasKey("CustomerId");

                            b1.ToTable("Customers");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");

                            b1.OwnsOne("IBuyStuff.Domain.Shared.ExpiryDate", "Expires", b2 =>
                                {
                                    b2.Property<string>("CreditCardCustomerId")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("Month")
                                        .HasColumnType("int")
                                        .HasColumnName("Payment_Expires_Month");

                                    b2.Property<DateTime>("When")
                                        .HasColumnType("datetime2");

                                    b2.Property<int>("Year")
                                        .HasColumnType("int")
                                        .HasColumnName("Payment_Expires_Year");

                                    b2.HasKey("CreditCardCustomerId");

                                    b2.ToTable("Customers");

                                    b2.WithOwner()
                                        .HasForeignKey("CreditCardCustomerId");
                                });

                            b1.Navigation("Expires")
                                .IsRequired();
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Payment")
                        .IsRequired();
                });

            modelBuilder.Entity("IBuyStuff.Domain.Customers.FidelityCard", b =>
                {
                    b.HasOne("IBuyStuff.Domain.Customers.Customer", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerCustomerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("IBuyStuff.Domain.Orders.Order", b =>
                {
                    b.HasOne("IBuyStuff.Domain.Customers.Customer", "Buyer")
                        .WithMany("Orders")
                        .HasForeignKey("BuyerCustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("IBuyStuff.Domain.Shared.Money", "Total", b1 =>
                        {
                            b1.Property<int>("OrderId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("OrderId");

                            b1.ToTable("Orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");

                            b1.OwnsOne("IBuyStuff.Domain.Shared.Currency", "Currency", b2 =>
                                {
                                    b2.Property<int>("MoneyOrderId")
                                        .HasColumnType("int");

                                    b2.Property<string>("Symbol")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("MoneyOrderId");

                                    b2.ToTable("Orders");

                                    b2.WithOwner()
                                        .HasForeignKey("MoneyOrderId");
                                });

                            b1.Navigation("Currency")
                                .IsRequired();
                        });

                    b.Navigation("Buyer");

                    b.Navigation("Total")
                        .IsRequired();
                });

            modelBuilder.Entity("IBuyStuff.Domain.Orders.OrderItem", b =>
                {
                    b.HasOne("IBuyStuff.Domain.Orders.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IBuyStuff.Domain.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("IBuyStuff.Domain.Products.Product", b =>
                {
                    b.OwnsOne("IBuyStuff.Domain.Shared.Money", "UnitPrice", b1 =>
                        {
                            b1.Property<int>("ProductId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("ProductId");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");

                            b1.OwnsOne("IBuyStuff.Domain.Shared.Currency", "Currency", b2 =>
                                {
                                    b2.Property<int>("MoneyProductId")
                                        .HasColumnType("int");

                                    b2.Property<string>("Symbol")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("MoneyProductId");

                                    b2.ToTable("Products");

                                    b2.WithOwner()
                                        .HasForeignKey("MoneyProductId");
                                });

                            b1.Navigation("Currency")
                                .IsRequired();
                        });

                    b.Navigation("UnitPrice")
                        .IsRequired();
                });

            modelBuilder.Entity("IBuyStuff.Domain.Customers.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("IBuyStuff.Domain.Orders.Order", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
